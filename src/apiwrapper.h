#include <libspotify/api.h>

SP_LIBEXPORT(sp_error) spw_session_create(const sp_session_config *config, sp_session **sess);
SP_LIBEXPORT(sp_error) spw_session_release(sp_session *sess);
SP_LIBEXPORT(sp_error) spw_session_login(sp_session *session, const char *username, const char *password, bool remember_me, const char *blob);
SP_LIBEXPORT(sp_error) spw_session_relogin(sp_session *session);
SP_LIBEXPORT(int) spw_session_remembered_user(sp_session *session, char *buffer, size_t buffer_size);
SP_LIBEXPORT(const char *) spw_session_user_name(sp_session *session);
SP_LIBEXPORT(sp_error) spw_session_forget_me(sp_session *session);
SP_LIBEXPORT(sp_user *) spw_session_user(sp_session *session);
SP_LIBEXPORT(sp_error) spw_session_logout(sp_session *session);
SP_LIBEXPORT(sp_error) spw_session_flush_caches(sp_session *session);
SP_LIBEXPORT(sp_connectionstate) spw_session_connectionstate(sp_session *session);
SP_LIBEXPORT(void *) spw_session_userdata(sp_session *session);
SP_LIBEXPORT(sp_error) spw_session_set_cache_size(sp_session *session, size_t size);
SP_LIBEXPORT(sp_error) spw_session_process_events(sp_session *session, int *next_timeout);
SP_LIBEXPORT(sp_error) spw_session_player_load(sp_session *session, sp_track *track);
SP_LIBEXPORT(sp_error) spw_session_player_seek(sp_session *session, int offset);
SP_LIBEXPORT(sp_error) spw_session_player_play(sp_session *session, bool play);
SP_LIBEXPORT(sp_error) spw_session_player_unload(sp_session *session);
SP_LIBEXPORT(sp_error) spw_session_player_prefetch(sp_session *session, sp_track *track);
SP_LIBEXPORT(sp_playlistcontainer *) spw_session_playlistcontainer(sp_session *session);
SP_LIBEXPORT(sp_playlist *) spw_session_inbox_create(sp_session *session);
SP_LIBEXPORT(sp_playlist *) spw_session_starred_create(sp_session *session);
SP_LIBEXPORT(sp_playlist *) spw_session_starred_for_user_create(sp_session *session, const char *canonical_username);
SP_LIBEXPORT(sp_playlistcontainer *) spw_session_publishedcontainer_for_user_create(sp_session *session, const char *canonical_username);
SP_LIBEXPORT(sp_error) spw_session_preferred_bitrate(sp_session *session, sp_bitrate bitrate);
SP_LIBEXPORT(sp_error) spw_session_preferred_offline_bitrate(sp_session *session, sp_bitrate bitrate, bool allow_resync);
SP_LIBEXPORT(bool) spw_session_get_volume_normalization(sp_session *session);
SP_LIBEXPORT(sp_error) spw_session_set_volume_normalization(sp_session *session, bool on);
SP_LIBEXPORT(sp_error) spw_session_set_private_session(sp_session *session, bool enabled);
SP_LIBEXPORT(bool) spw_session_is_private_session(sp_session *session);
SP_LIBEXPORT(sp_error) spw_session_set_scrobbling(sp_session *session, sp_social_provider provider, sp_scrobbling_state state);
SP_LIBEXPORT(sp_error) spw_session_is_scrobbling(sp_session *session, sp_social_provider provider, sp_scrobbling_state* state);
SP_LIBEXPORT(sp_error) spw_session_is_scrobbling_possible(sp_session *session, sp_social_provider provider, bool* out);
SP_LIBEXPORT(sp_error) spw_session_set_social_credentials(sp_session *session, sp_social_provider provider, const char* username, const char* password);
SP_LIBEXPORT(sp_error) spw_session_set_connection_type(sp_session *session, sp_connection_type type);
SP_LIBEXPORT(sp_error) spw_session_set_connection_rules(sp_session *session, sp_connection_rules rules);
SP_LIBEXPORT(int) spw_offline_tracks_to_sync(sp_session *session);
SP_LIBEXPORT(int) spw_offline_num_playlists(sp_session *session);
SP_LIBEXPORT(bool) spw_offline_sync_get_status(sp_session *session, sp_offline_sync_status *status);
SP_LIBEXPORT(int) spw_offline_time_left(sp_session *session);
SP_LIBEXPORT(int) spw_session_user_country(sp_session *session);
SP_LIBEXPORT(sp_track_availability) spw_track_get_availability(sp_session *session, sp_track *track);
SP_LIBEXPORT(bool) spw_track_is_local(sp_session *session, sp_track *track);
SP_LIBEXPORT(bool) spw_track_is_autolinked(sp_session *session, sp_track *track);
SP_LIBEXPORT(sp_track *) spw_track_get_playable(sp_session *session, sp_track *track);
SP_LIBEXPORT(bool) spw_track_is_starred(sp_session *session, sp_track *track);
SP_LIBEXPORT(sp_error) spw_track_set_starred(sp_session *session, sp_track *const*tracks, int num_tracks, bool star);
SP_LIBEXPORT(sp_albumbrowse *) spw_albumbrowse_create(sp_session *session, sp_album *album, albumbrowse_complete_cb *callback, void *userdata);
SP_LIBEXPORT(sp_artistbrowse *) spw_artistbrowse_create(sp_session *session, sp_artist *artist, sp_artistbrowse_type type, artistbrowse_complete_cb *callback, void *userdata);
SP_LIBEXPORT(sp_image *) spw_image_create(sp_session *session, const byte image_id[20]);
SP_LIBEXPORT(sp_image *) spw_image_create_from_link(sp_session *session, sp_link *l);
SP_LIBEXPORT(sp_search *) spw_search_create(sp_session *session, const char *query, int track_offset, int track_count, int album_offset, int album_count, int artist_offset, int artist_count, int playlist_offset, int playlist_count, sp_search_type search_type, search_complete_cb *callback, void *userdata);
SP_LIBEXPORT(sp_error) spw_playlist_add_tracks(sp_playlist *playlist, sp_track *const*tracks, int num_tracks, int position, sp_session *session);
SP_LIBEXPORT(sp_error) spw_playlist_update_subscribers(sp_session *session, sp_playlist *playlist);
SP_LIBEXPORT(bool) spw_playlist_is_in_ram(sp_session *session, sp_playlist *playlist);
SP_LIBEXPORT(sp_error) spw_playlist_set_in_ram(sp_session *session, sp_playlist *playlist, bool in_ram);
SP_LIBEXPORT(sp_playlist *) spw_playlist_create(sp_session *session, sp_link *link);
SP_LIBEXPORT(sp_error) spw_playlist_set_offline_mode(sp_session *session, sp_playlist *playlist, bool offline);
SP_LIBEXPORT(sp_playlist_offline_status) spw_playlist_get_offline_status(sp_session *session, sp_playlist *playlist);
SP_LIBEXPORT(int) spw_playlist_get_offline_download_completed(sp_session *session, sp_playlist *playlist);
SP_LIBEXPORT(sp_toplistbrowse *) spw_toplistbrowse_create(sp_session *session, sp_toplisttype type, sp_toplistregion region, const char *username, toplistbrowse_complete_cb *callback, void *userdata);
SP_LIBEXPORT(sp_inbox *) spw_inbox_post_tracks(sp_session *session, const char *user, sp_track * const *tracks, int num_tracks, const char *message, inboxpost_complete_cb *callback, void *userdata);
